#----------------------------------------------------------------------
# command snippets
#----------------------------------------------------------------------
[net-host-ip]
command = hostname -I

[net-public-ip]
command = q-myip

#----------------------------------------------------------------------
# bash/zsh functions
#----------------------------------------------------------------------
[ func-extract ]
command = q-extract "$(?Something)"

[ func-compress ]
command = q-compress "$(?Something)"

; [git-push-master] command=git push origin master
;
; [git-pull-master] command=git pull origin master
;
; [git-fetch-master] command=git fetch origin master
;
; [git-checkout] command=git checkout $(?branch)
;
; [git-proxy-on] command=git config --global http.proxy
; "socks5://localhost:1080" && git config --global https.proxy
; "socks5://localhost:1080"
;
; [git-proxy-off] command=git config --global --unset http.proxy && git config
; --global --unset https.proxy
;
; [git-status] command=git status
;
; [git-log] command=tig
;
; [misc-supervisor-reload] command=sudo supervisorctl reload
;
; [misc-weather] command=curl -s wttr.in/?n0
;
; [misc-benchmark-cpu] command=python -c "import
; test.pystone;print(test.pystone.pystones(500000))"
;
; [misc-benchmark-mem] command=dd if=/dev/zero of=/dev/null bs=1M count=32768
;
; [misc-disk-usage] command=df -h
;
; [misc-system-info] command=neofetch
;
; [misc-create-qr-code] command=echo '$(?content)' | curl -F-=\<- qrenco.de
;
; [net-check-port] command=sudo lsof -i :$(?port)
;
;
; [net-start-http] command=python -m SimpleHTTPServer $(?port)
;
; [net-whois-domain] command=/usr/bin/whois -h whois.internic.net $(?domain) |
; sed '/NOTICE:/q'
;
; [ssh-qn1] command=ssh qn1.skywind.me
;
; [ssh-11] command=ssh 192.168.1.11
;
; [ssh-10] command=ssh 192.168.1.10
;
; [ssh-12] command=ssh 192.168.1.12
;
; [ssh-3] command=ssh 192.168.1.3


#---------------------------------------------------------------------- #
# emerge snippets
#----------------------------------------------------------------------
[ emerge-query-pkg ]
# command = emerge --searchdesc "$(?package)"
# command = eix "$(?package_pattern)"
command = qsearch "$(?package)"
# command = equery list -po "$(?package)"

[ emerge-query-pkg-installed ]
command = eix -I "$(?package_pattern)"

[ emerge-query-pkg-dependon ]
command = equery depends "$(?package)"

[ emerge-query-pkg-depgraph ]
command = equery depgraph "$(?package)"

[ emerge-query-pkg-files ]
command = equery files --tree "$(?package)"

[ emerge-query-pkg-size ]
command = equery size "$(?package)"

[ emerge-query-pkg-ebuild-path ]
command = equery which "$(?package)"

[ emerge-query-pkg-has-use ]
command = equery hasuse "$(?USE)"

[ emerge-query-pkg-all-use ]
command = equery uses "$(?package)"

[ emerge-query-pkg-info ]
# command = sudo eix "$(?package)"
command = equery meta --description "$(?package)"

[ emerge-query-pkg-installed-with-use ]
command = sudo eix --installed-with-use "$(?USE)"

[ emerge-query-pkg-last-10-installed ]
command = sudo genlop -l | tail -n 10

[ emerge-query-pkg-ebuild-time ]
command = sudo genlop -t "$(?package)"

[ emerge-query-use-info ]
command = euse -i "$(?USE)"

[ emerge-query-sys-update-time ]
command = sudo emerge -pU @world | genlop --pretend

[ emerge-query-pkg-installing ]
command = sudo watch genlop -unc

# portageq envvar MAKEOPTS
[emerge-query-envvar]
command = portageq envvar "$(?envvar)"

[ emerge-query-command ]
# Tell which installed package provides a command using equery:
# command = equery belongs `which "$(?command)"`
# Tell which (not) installed package provides a command using e-file:
command = e-file "$(?command)"

# display missing packages or packages with obsolete entries in
# /etc/portage/package.* in a more organized manner than eix -tTc would do
# alone.
[emerge-query-obsolete]
command = eix-test-obsolete

[emerge-query-repo-path]
command = portageq get_repo_path / "$(?repo)"

[emerge-repo-sync]
command = sudo emaint sync --auto

[emerge-repo-config]
command = portageq repos_config /

[emerge-check-pkg]
command = equery check "$(?package)"

[ emerge-check-world ]
command = emaint --check world

[ emerge-check-ebuild-repo ]
command = gemato verify -K /usr/share/openpgp-keys/gentoo-release.asc /var/db/repos/gentoo

[ emerge-check-libraries ]
command = sudo revdep-rebuild -v

[ emerge-list-overlay ]
command = eselect repository list

[ emerge-list-installed-overlay ]
command = eselect repository list -i

[ emerge-list-all-installed-pkg ]
command = sudo qlist -IRv

[ emerge-list-preserved-libs ]
command = sudo portageq list_preserved_libs /

[ emerge-list-use-active ]
command = euse -a

[emerge-list-sets]
command = emerge --list-sets
# root # emerge --ask @gpu-stack
# Selecting "Yes" here will add the set to the /var/lib/portage/world_sets file. Use --oneshot to avoid this.
# To remove a user defined set from world_sets, use the --deselect option to emerge, then clean up orphaned dependencies:
# root #emerge --deselect @gpu-stack
# root #emerge --ask --depclean
# Do not use the --depclean or --unmerge options to remove the set itself. Doing so may remove critical packages.

[ emerge-sys-update ]
command = sudo emerge --update --newuse --deep --with-bdeps=y @world

[emerge-feature-active]
command = portageq envvar FEATURES | xargs -n 1

# egencache is a tool that (re)builds metadata information for the Portage package database.
# By default the metadata corresponds to the Gentoo ebuild repository.
# Metadata for the Portage package database comes included in Gentoo repository snapshots and, in most circumstances, can be re-downloaded by running an emerge --sync.
# Rebuilding the metadata cache
[emerge-regen-cache]
command = sudo egencache --jobs=17 --update --repo gentoo

[ emerge-regen-world ]
command = sudo cp /var/lib/portage/world /var/lib/portage/world.bak && sudo regenworld

# Clean the source files directory by passing the distfiles argument:
# root #eclean distfiles
# Or by running the short option:
# root #eclean-dist

# For the directory with the binary packages use the following command instead:
# root #eclean packages
# Or by running the short option:
# root #eclean-pkg

# elogv is a curses-based tool that parses the contents of elogs created by Portage.

# epkginfo is a tool used to display package metadata information. It is a shortcut to using the equery meta command.

# sudo eselect repository add customkernel git https://github.com/HougeLangley/customkernel

# After updating perl-core packages:
# root #perl-cleaner --all
# or if previous didn't help:
# root #perl-cleaner --reallyall -- -av

# For haskell packages:
# root #haskell-updater
